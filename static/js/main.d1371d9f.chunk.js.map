{"version":3,"sources":["logo.svg","components/Table.tsx","redux/actions.ts","api/api.ts","api/getTableApi.ts","redux/setTable-reducer.ts","components/Header.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","Table","props","tableData","map","el","key","id","scope","firstName","lastName","email","phone","className","SET_TABLE_SMALL","SET_TABLE_LARGE","setTableLargeAC","data","type","instance","axios","create","baseURL","getTableApi","get","then","res","initialSate","Header","dispatch","useDispatch","fetchData","e","table","setShowTable","a","response","src","logo","alt","ButtonGroup","toggle","name","value","radio","idx","ToggleButton","variant","checked","showTable","onChange","currentTarget","App","useState","useSelector","store","tablePage","Boolean","window","location","hostname","match","reducers","combineReducers","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1371d9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { IData } from '../redux/setTable-reducer';\r\n\r\ninterface IProps {\r\n\ttableData: Array<IData>\r\n}\r\n\r\nexport const Table = (props: IProps) => {\r\n\r\n\tlet tableData = props.tableData.map(el => (\r\n\t\t<tr key={el.id}>\r\n\t\t\t<th scope=\"row\">{el.id}</th>\r\n\t\t\t<td>{el.firstName}</td>\r\n\t\t\t<td>{el.lastName}</td>\r\n\t\t\t<td>{el.email}</td>\r\n\t\t\t<td>{el.phone}</td>\r\n\t\t</tr>));\r\n\r\n\treturn (\r\n\t\t<div className=\"d-flex justify-content-center\">\r\n\t\t\t<table className=\"table w-75 border\">\r\n\t\t\t\t<thead className=\"thead-light\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"col\">id</th>\r\n\t\t\t\t\t\t<th scope=\"col\">firstName</th>\r\n\t\t\t\t\t\t<th scope=\"col\">lastName</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Email</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Phone</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{tableData}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};","import { IData, ITableSmall, ITableLarge } from \"./setTable-reducer\";\r\n\r\nexport const SET_TABLE_SMALL = 'setTable-reducer/SET_TABLE_SMALL';\r\nexport const SET_TABLE_LARGE = 'setTable-reducer/SET_TABLE_LARGE';\r\n\r\nexport const setTableSmalAC = (data: Array<IData>): ITableSmall => ({ type: SET_TABLE_SMALL, data });\r\nexport const setTableLargeAC = (data: Array<IData>): ITableLarge => ({ type: SET_TABLE_LARGE, data });","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({ baseURL: ' http://www.filltext.com/' });\r\n\r\nexport default instance;","import instance from './api';\r\n\r\n\r\nexport const getTableApi = {\r\n\tgetTableSmall() {\r\n\t\treturn instance.get('?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\r\n\t\t.then(res => res.data);\r\n\t},\r\n\tgetTableLarge() {\r\n\t\treturn instance.get('?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\r\n\t\t.then(res => res.data);\r\n\t}\r\n};","import { SET_TABLE_SMALL, SET_TABLE_LARGE, setTableSmalAC, setTableLargeAC } from './actions';\r\nimport { Dispatch } from 'redux';\r\nimport { getTableApi } from './../api/getTableApi';\r\n\r\n\r\nexport type IData = {\r\n\tid: number;\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\temail: string;\r\n\tphone: string;\r\n\taddress: {\r\n\t\tstreetAddress: string;\r\n\t\tcity: string;\r\n\t\tstate: string;\r\n\t\tzip: string;\r\n\t}\r\n\tdescription: string;\r\n};\r\n\r\nexport interface IInitialSatate {\r\n\tdata: Array<IData>\r\n};\r\n\r\nexport interface ITableSmall {\r\n\ttype: string;\r\n\tdata: Array<IData>;\r\n};\r\n\r\nexport interface ITableLarge {\r\n\ttype: typeof SET_TABLE_LARGE;\r\n\tdata: Array<IData>;\r\n};\r\n\r\nconst initialSate = {\r\n\tdata: []\r\n};\r\n\r\n\r\nexport const tableReducer = (state: IInitialSatate = initialSate, action: ITableSmall | ITableLarge) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_TABLE_SMALL:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: action.data\r\n\t\t\t}\r\n\t\tcase SET_TABLE_LARGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: action.data\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const tableDriwingTC = (table: string) => async (dispatch: Dispatch) => {\r\n\ttry {\r\n\t\tif (table === 'Small') {\r\n\t\t\t\r\n\t\t\tconst response = await getTableApi.getTableSmall();\r\n\t\t\tdispatch(setTableSmalAC(response));\r\n\t\t} else if (table === 'Large') {\r\n\t\t\tconst response = await getTableApi.getTableLarge();\r\n\t\t\tdispatch(setTableLargeAC(response));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};","import React from 'react';\r\nimport logo from './../logo.svg';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport { tableDriwingTC } from '../redux/setTable-reducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface IpropsHeader {\r\n\tshowTable: string;\r\n\tsetShowTable(e: string): void;\r\n}\r\n\r\nconst Header = (props: IpropsHeader) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst radios = [\r\n\t\t{ name: 'Small', value: 'Small' },\r\n\t\t{ name: 'Large', value: 'Large' }\r\n\t];\r\n\r\n\tconst fetchData = (e: string) => {\r\n\t\tprops.setShowTable(e);\r\n\t\tdispatch(tableDriwingTC(e));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App-header\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"\">Show table</h1>\r\n\t\t\t\t\t<ButtonGroup toggle className=\"mb-5\">\r\n\t\t\t\t\t\t{radios.map((radio, idx) => (\r\n\t\t\t\t\t\t\t<ToggleButton\r\n\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\t\tname=\"radio\"\r\n\t\t\t\t\t\t\t\tvalue={radio.value}\r\n\t\t\t\t\t\t\t\tchecked={props.showTable === radio.value}\r\n\t\t\t\t\t\t\t\tonChange={(e) => fetchData(e.currentTarget.value)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{radio.name}\r\n\t\t\t\t\t\t\t</ToggleButton>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table } from './components/Table';\nimport { useSelector } from 'react-redux';\nimport { IData } from './redux/setTable-reducer';\nimport { AppStateType } from './redux/store';\nimport Header from './components/Header';\n\n\n\nfunction App() {\n\n\tconst [showTable, setShowTable] = useState('');\n\tconst tableData = useSelector((store: AppStateType): Array<IData> => store.tablePage.data);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header setShowTable={setShowTable} showTable={showTable} />\n\t\t\t{showTable && <Table tableData={tableData} />}\n\t\t</div>\n\t);\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { tableReducer } from './setTable-reducer';\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n\ttablePage: tableReducer\r\n});\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}