{"version":3,"sources":["logo.svg","components/Paginator.tsx","redux/actions.ts","components/Table.tsx","api/api.ts","api/getTableApi.ts","redux/setTable-reducer.ts","components/Header.tsx","components/MaterialTableJSX.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","Paginator","dataLength","pageSize","setPageSize","currentPage","setCurrentPage","useState","portionSize","setPortionSize","startPortion","setStartPortion","pages","allPages","Math","ceil","i","push","pagesData","map","p","Pagination","Item","key","uuidv4","active","onClick","setNumberCallback","useCallback","val","className","defaultValue","onChange","e","target","value","First","Prev","Next","Last","SET_TABLE_SMALL","SET_TABLE_LARGE","SET_PRELOADER","SET_SORT_DATA","SET_NEW_DATA","setTableLargeAC","data","preloader","type","setPreloaderAC","Table","props","dispatch","useDispatch","watchInfoBool","setWatchInfoBool","address","setAddress","newData","setNewData","useForm","register","errors","handleSubmit","tableHead","useSelector","state","tablePage","leftPortionPageNumber","rightPortionPageNumber","watchInfo","dataId","currentTarget","dataset","id","watchAddress","tableData","find","el","tableHeadJSX","th","sort","scope","data-value","data-bool","filter","data-id","firstName","lastName","email","phone","onSubmit","setNewDataAC","streetAddress","city","zip","description","placeholder","name","ref","required","length","dataValue","dataBool","bool","sortData","a","b","sortTAbleHead","setSortDataAC","instance","axios","create","baseURL","getTableApi","get","then","res","initialSate","Header","fetchData","table","setShowTable","response","src","logo","alt","ButtonGroup","toggle","radio","idx","ToggleButton","variant","checked","showTable","MaterialTableJSX","tableIcons","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","setData","icons","title","columns","field","options","search","sorting","editable","onRowAdd","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","onRowDelete","dataDelete","index","splice","App","tableWatch","setTableWatch","Boolean","window","location","hostname","match","reducers","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b24d8f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { ChangeEvent, useCallback, useState } from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\ntype paginatorType = {\r\n\tdataLength: number;\r\n\tpageSize: number;\r\n\tsetPageSize: (e: number) => void;\r\n\tcurrentPage: number;\r\n\tsetCurrentPage: (arg: number) => void;\r\n}\r\n\r\nconst Paginator: React.FC<paginatorType> = ({ dataLength, pageSize, setPageSize, currentPage, setCurrentPage }) => {\r\n\r\n\tconst [portionSize, setPortionSize] = useState(10);\r\n\tconst [startPortion, setStartPortion] = useState(1);\r\n\r\n\tconst pages = [];\r\n\tconst allPages = Math.ceil(dataLength / pageSize);\r\n\r\n\tfor (let i = startPortion; i <= portionSize; i++) {\r\n\t\tpages.push(i);\r\n\t};\r\n\r\n\tif (allPages < portionSize) {\r\n\t\tsetPortionSize(allPages);\r\n\t}\r\n\r\n\tconst pagesData = pages\r\n\t\t.map(p => {\r\n\t\t\tif (allPages >= portionSize) {\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Pagination.Item\r\n\t\t\t\t\t\tkey={uuidv4()}\r\n\t\t\t\t\t\tactive={currentPage === p ? true : false}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetCurrentPage(p);\r\n\t\t\t\t\t\t\tif (p === portionSize && p !== allPages) {\r\n\t\t\t\t\t\t\t\tsetStartPortion(startPortion + 9);\r\n\t\t\t\t\t\t\t\tsetPortionSize(portionSize + 9);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{p}\r\n\t\t\t\t\t</Pagination.Item>\r\n\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\treturn <Pagination.Item\r\n\t\t\t\t\tkey={uuidv4()}\r\n\t\t\t\t\tactive={currentPage === p ? true : false}\r\n\t\t\t\t\tonClick={() => setCurrentPage(p)}>\r\n\t\t\t\t\t{p}\r\n\t\t\t\t</Pagination.Item>\r\n\t\t\t}\r\n\t\t});\r\n\r\n\tconst setNumberCallback = useCallback((val) => setCurrentPage(val), [setCurrentPage]);\r\n\r\n\treturn (\r\n\t\t<div className=\"d-flex mr-5\">\r\n\t\t\t<div>\r\n\t\t\t\t<select defaultValue={5} onChange={(e: ChangeEvent<HTMLSelectElement>) => {\r\n\t\t\t\t\tsetPageSize(+e.target.value);\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<option value={5}>5</option>\r\n\t\t\t\t\t<option value={10}>10</option>\r\n\t\t\t\t\t<option value={25}>25</option>\r\n\t\t\t\t\t<option value={dataLength}>All</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Pagination>\r\n\t\t\t\t<Pagination.First onClick={() => {\r\n\t\t\t\t\tcurrentPage > 1 && setNumberCallback(1);\r\n\t\t\t\t\tsetStartPortion(1);\r\n\t\t\t\t\tsetPortionSize(10);\r\n\t\t\t\t}} />\r\n\r\n\t\t\t\t<Pagination.Prev onClick={() => {\r\n\t\t\t\t\tif (currentPage > 1 && currentPage === startPortion) {\r\n\t\t\t\t\t\tsetStartPortion(startPortion - 9);\r\n\t\t\t\t\t\tsetPortionSize(portionSize - 9);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrentPage > 1 && setNumberCallback(currentPage - 1);\r\n\t\t\t\t}} />\r\n\r\n\t\t\t\t{pagesData}\r\n\r\n\t\t\t\t<Pagination.Next onClick={() => {\r\n\t\t\t\t\tif (allPages > portionSize && currentPage === portionSize && currentPage !== allPages) {\r\n\t\t\t\t\t\tsetStartPortion(startPortion + 9);\r\n\t\t\t\t\t\tsetPortionSize(portionSize + 9);\r\n\t\t\t\t\t} else if (allPages > portionSize && currentPage === allPages - 1) {\r\n\t\t\t\t\t\tsetStartPortion(allPages - 9);\r\n\t\t\t\t\t\tsetPortionSize(allPages);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrentPage < allPages && setNumberCallback(currentPage + 1);\r\n\t\t\t\t}} />\r\n\r\n\t\t\t\t<Pagination.Last onClick={() => {\r\n\t\t\t\t\tif (allPages > portionSize) {\r\n\t\t\t\t\t\tcurrentPage < allPages && setNumberCallback(allPages);\r\n\t\t\t\t\t\tsetStartPortion(allPages - 9);\r\n\t\t\t\t\t\tsetPortionSize(allPages);\r\n\t\t\t\t\t}\r\n\t\t\t\t}} />\r\n\t\t\t</Pagination>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Paginator;","import { IData, ITableSmall, ITableLarge, ITablePreloader, ISortData, ITableHead, ISetNewData } from \"./setTable-reducer\";\r\n\r\nexport const SET_TABLE_SMALL = 'setTable-reducer/SET_TABLE_SMALL';\r\nexport const SET_TABLE_LARGE = 'setTable-reducer/SET_TABLE_LARGE';\r\nexport const SET_PRELOADER = 'setTable-reducer/SET_PRELOADER';\r\nexport const SET_SORT_DATA = 'setTable-reducer/SET_SORT_DATA';\r\nexport const SET_NEW_DATA = 'setTable-reducer/SET_NEW_DATA';\r\n\r\nexport const setTableSmalAC = (data: Array<IData>, preloader: boolean): ITableSmall => ({ type: SET_TABLE_SMALL, data, preloader });\r\nexport const setTableLargeAC = (data: Array<IData>, preloader: boolean): ITableLarge => ({ type: SET_TABLE_LARGE, data, preloader });\r\nexport const setPreloaderAC = (preloader: boolean): ITablePreloader => ({ type: SET_PRELOADER, preloader });\r\nexport const setSortDataAC = (data: Array<IData>, tableHead: Array<ITableHead>): ISortData => ({ type: SET_SORT_DATA, data, tableHead });\r\nexport const setNewDataAC = (data: IData): ISetNewData => ({ type: SET_NEW_DATA, data });","import React, { useState } from 'react';\r\nimport { IData } from '../redux/setTable-reducer';\r\nimport Paginator from './Paginator';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppStateType } from '../redux/store';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { setSortDataAC, setNewDataAC } from '../redux/actions';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n\r\ninterface IProps {\r\n\ttableData: Array<IData>;\r\n};\r\n\r\nexport const Table = (props: IProps) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst [currentPage, setCurrentPage] = useState(1);\r\n\tconst [pageSize, setPageSize] = useState(5);\r\n\tconst [watchInfoBool, setWatchInfoBool] = useState(false);\r\n\tconst [address, setAddress] = useState<IData>({} as IData);\r\n\tconst [newData, setNewData] = useState(false);\r\n\r\n\tconst { register, errors, handleSubmit } = useForm();\r\n\r\n\tconst onSubmit = (data: any) => {\r\n\t\tdispatch(setNewDataAC({\r\n\t\t\t...data, address: {\r\n\t\t\t\tstreetAddress: '',\r\n\t\t\t\tcity: '',\r\n\t\t\t\tstate: '',\r\n\t\t\t\tzip: ''\r\n\t\t\t},\r\n\t\t\tdescription: ''\r\n\t\t}));\r\n\t}\r\n\r\n\tconst tableHead = useSelector((state: AppStateType) => state.tablePage.tableHead);\r\n\tlet leftPortionPageNumber = (currentPage - 1) * pageSize + 1;\r\n\tlet rightPortionPageNumber = currentPage * pageSize;\r\n\r\n\r\n\tconst tableHeadSort = (e: any) => {\r\n\t\tconst dataValue = e.target.dataset.value as keyof IData;\r\n\t\tconst dataBool = e.target.dataset.bool;\r\n\r\n\t\tlet sortData = props.tableData.sort((a, b) => dataBool === 'false' ?\r\n\t\t\ta[dataValue] > b[dataValue] ? 1 : -1 :\r\n\t\t\tb[dataValue] > a[dataValue] ? 1 : -1);\r\n\t\tlet sortTAbleHead = tableHead.map(({ th, sort }) => th === dataValue && !sort ? { th, sort: true } : { th, sort: false });\r\n\t\tdispatch(setSortDataAC(sortData, sortTAbleHead));\r\n\t};\r\n\r\n\tconst watchInfo = (e: any) => {\r\n\t\tconst dataId = e.currentTarget.dataset.id;\r\n\t\tconst watchAddress: any = props.tableData.find(el => +dataId === el.id);\r\n\t\tsetAddress(watchAddress);\r\n\t\tsetWatchInfoBool(true);\r\n\t}\r\n\r\n\tconst addData = (e: any) => {\r\n\t\tnewData ? setNewData(false) : setNewData(true);\r\n\t}\r\n\r\n\r\n\tlet tableHeadJSX = tableHead.map(({ th, sort }) => <th\r\n\t\tclassName=\"table-head\"\r\n\t\tkey={uuidv4()}\r\n\t\tscope=\"col\"\r\n\t\tdata-value={th}\r\n\t\tdata-bool={sort}>{th}&nbsp;{sort ? '▲' : '▼'}</th>);\r\n\r\n\tlet tableData = props.tableData\r\n\t\t.filter((p, i) => i >= leftPortionPageNumber && i <= rightPortionPageNumber)\r\n\t\t.map(el => (\r\n\t\t\t<tr key={uuidv4()} data-id={el.id} onClick={watchInfo}>\r\n\t\t\t\t<th scope=\"row\">{el.id}</th>\r\n\t\t\t\t<td>{el.firstName}</td>\r\n\t\t\t\t<td>{el.lastName}</td>\r\n\t\t\t\t<td>{el.email}</td>\r\n\t\t\t\t<td>{el.phone}</td>\r\n\t\t\t</tr>));\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"d-flex p-2\">\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm mb-auto mr-auto ml-5 pl-3 pr-3\"\r\n\t\t\t\t\tonClick={addData}>Add data</button>\r\n\t\t\t\t{newData &&\r\n\t\t\t\t\r\n\t\t\t\t\t<form onSubmit={handleSubmit(onSubmit)} className=\"form-col col-md-3\">\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"form-control m-1\" \r\n\t\t\t\t\t\tplaceholder=\"id\" \r\n\t\t\t\t\t\tname=\"id\" \r\n\t\t\t\t\t\tref={register({ required: true })} />\r\n\t\t\t\t\t\t{errors.firstName && \"add id\"}\r\n\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"form-control m-1\" \r\n\t\t\t\t\t\tplaceholder=\"firstName\" \r\n\t\t\t\t\t\tname=\"firstName\" \r\n\t\t\t\t\t\tref={register({ required: true })} />\r\n\t\t\t\t\t\t{errors.firstName && \"add firstName\"}\r\n\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"form-control m-1\" \r\n\t\t\t\t\t\tplaceholder=\"lastName\" \r\n\t\t\t\t\t\tname=\"lastName\" \r\n\t\t\t\t\t\tref={register({ required: true })} />\r\n\t\t\t\t\t\t{errors.firstName && \"add lastName\"}\r\n\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"form-control m-1\" \r\n\t\t\t\t\t\tplaceholder=\"email\" \r\n\t\t\t\t\t\tname=\"email\" \r\n\t\t\t\t\t\tref={register({ required: true })} />\r\n\t\t\t\t\t\t{errors.firstName && \"add email\"}\r\n\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"form-control m-1\" \r\n\t\t\t\t\t\tplaceholder=\"phone\" \r\n\t\t\t\t\t\tname=\"phone\" \r\n\t\t\t\t\t\tref={register({ required: true })} />\r\n\t\t\t\t\t\t{errors.firstName && \"add phone\"}\r\n\r\n\t\t\t\t\t\t<input className=\"btn btn-secondary btn-sm\" type=\"submit\" />\r\n\t\t\t\t\t</form>}\r\n\t\t\t\t<Paginator\r\n\t\t\t\t\tdataLength={props.tableData.length}\r\n\t\t\t\t\tpageSize={pageSize}\r\n\t\t\t\t\tsetPageSize={setPageSize}\r\n\t\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\t\tsetCurrentPage={setCurrentPage} />\r\n\t\t\t</div>\r\n\r\n\t\t\t<table className=\"table border\">\r\n\t\t\t\t<thead className=\"thead-light\" onClick={tableHeadSort}>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t{tableHeadJSX}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{tableData}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t{watchInfoBool &&\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<div>Выбран пользователь <b>{address.firstName}&nbsp;{address.lastName}</b></div>\r\n\t\t\t\t\t<div>Описание:\r\n\t\t\t\t\t\t<textarea>\r\n\t\t\t\t\t\t\t{address.description}\r\n\t\t\t\t\t\t</textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>Адрес проживания: <b>{address.address.streetAddress}</b></div>\r\n\t\t\t\t\t<div>Город: <b>{address.address.city}</b></div>\r\n\t\t\t\t\t<div>Провинция/штат: <b>{address.address.state}</b></div>\r\n\t\t\t\t\t<div>Индекс: <b>{address.address.zip}</b></div>\r\n\t\t\t\t</div>}\r\n\t\t</div>\r\n\t);\r\n};","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({ baseURL: ' http://www.filltext.com/' });\r\n\r\nexport default instance;","import instance from './api';\r\n\r\n\r\nexport const getTableApi = {\r\n\tgetTableSmall() {\r\n\t\treturn instance.get('?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\r\n\t\t.then(res => res.data);\r\n\t},\r\n\tgetTableLarge() {\r\n\t\treturn instance.get('?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\r\n\t\t.then(res => res.data);\r\n\t}\r\n};","import { SET_TABLE_SMALL, SET_TABLE_LARGE, SET_PRELOADER, setTableSmalAC, setTableLargeAC, setPreloaderAC, SET_SORT_DATA, SET_NEW_DATA } from './actions';\r\nimport { Dispatch } from 'redux';\r\nimport { getTableApi } from './../api/getTableApi';\r\n\r\n\r\nexport type IData = {\r\n\tid: number;\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\temail: string;\r\n\tphone: string;\r\n\taddress: {\r\n\t\tstreetAddress: string;\r\n\t\tcity: string;\r\n\t\tstate: string;\r\n\t\tzip: string;\r\n\t}\r\n\tdescription: string;\r\n};\r\n\r\nexport type ITableHead = {\r\n\tth: string;\r\n\tsort: boolean;\r\n}\r\n\r\nexport interface ITablePreloader {\r\n\ttype: typeof SET_PRELOADER;\r\n\tpreloader: boolean;\r\n}\r\n\r\n\r\nexport interface ITableSmall {\r\n\ttype: typeof SET_TABLE_SMALL;\r\n\tdata: Array<IData>;\r\n\tpreloader: boolean;\r\n};\r\n\r\nexport interface ITableLarge {\r\n\ttype: typeof SET_TABLE_LARGE;\r\n\tdata: Array<IData>;\r\n\tpreloader: boolean;\r\n};\r\n\r\nexport interface ISortData {\r\n\ttype: typeof SET_SORT_DATA;\r\n\tdata: Array<IData>;\r\n\ttableHead: Array<ITableHead>;\r\n};\r\n\r\nexport interface ISetNewData {\r\n\ttype: typeof SET_NEW_DATA;\r\n\tdata: IData;\r\n};\r\n\r\nconst initialSate = {\r\n\ttableHead: [\r\n\t\t{ th: 'id', sort: false },\r\n\t\t{ th: 'firstName', sort: false },\r\n\t\t{ th: 'lastName', sort: false },\r\n\t\t{ th: 'Email', sort: false },\r\n\t\t{ th: 'Phone', sort: false }\r\n\t] as Array<ITableHead>,\r\n\tpreloader: false,\r\n\tdata: [] as Array<IData>\r\n};\r\n\r\nexport type IInitialSatate = typeof initialSate\r\n\r\nexport const tableReducer = (state = initialSate, action: ITableSmall | ITableLarge | ITablePreloader | ISortData | ISetNewData): IInitialSatate => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_TABLE_SMALL:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: action.data, preloader: action.preloader\r\n\t\t\t}\r\n\t\tcase SET_TABLE_LARGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: action.data, preloader: action.preloader\r\n\t\t\t}\r\n\t\tcase SET_PRELOADER:\r\n\t\t\treturn {\r\n\t\t\t\t...state, preloader: action.preloader\r\n\t\t\t}\r\n\t\tcase SET_SORT_DATA:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: action.data, tableHead: action.tableHead\r\n\t\t\t}\r\n\t\tcase SET_NEW_DATA:\r\n\t\t\treturn {\r\n\t\t\t\t...state, data: [action.data, ...state.data]\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const tableDriwingTC = (table: string) => async (dispatch: Dispatch) => {\r\n\ttry {\r\n\t\tif (table === 'Small') {\r\n\r\n\t\t\tdispatch(setPreloaderAC(true));\r\n\t\t\tconst response = await getTableApi.getTableSmall();\r\n\t\t\tdispatch(setTableSmalAC(response, false));\r\n\t\t} else if (table === 'Large') {\r\n\t\t\tdispatch(setPreloaderAC(true));\r\n\t\t\tconst response = await getTableApi.getTableLarge();\r\n\t\t\tdispatch(setTableLargeAC(response, false));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};","import React from 'react';\r\nimport logo from './../logo.svg';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport { tableDriwingTC } from '../redux/setTable-reducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface IpropsHeader {\r\n\tshowTable: string;\r\n\tsetShowTable(e: string): void;\r\n}\r\n\r\nconst Header = (props: IpropsHeader) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst radios = [\r\n\t\t{ name: 'Small', value: 'Small' },\r\n\t\t{ name: 'Large', value: 'Large' }\r\n\t];\r\n\r\n\tconst fetchData = (e: string) => {\r\n\t\tprops.setShowTable(e);\r\n\t\tdispatch(tableDriwingTC(e));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App-header\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"\">Show table</h1>\r\n\t\t\t\t\t<ButtonGroup toggle className=\"mb-5\">\r\n\t\t\t\t\t\t{radios.map((radio, idx) => (\r\n\t\t\t\t\t\t\t<ToggleButton\r\n\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\t\tname=\"radio\"\r\n\t\t\t\t\t\t\t\tvalue={radio.value}\r\n\t\t\t\t\t\t\t\tchecked={props.showTable === radio.value}\r\n\t\t\t\t\t\t\t\tonChange={(e) => fetchData(e.currentTarget.value)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{radio.name}\r\n\t\t\t\t\t\t\t</ToggleButton>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;","import React, { forwardRef, useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { AppStateType } from '../redux/store';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\nconst MaterialTableJSX = () => {\r\n\r\n\tconst tableIcons: any = {\r\n\t\tAdd: forwardRef((props: any, ref: any) => <AddBox {...props} ref={ref} />),\r\n\t\tCheck: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\r\n\t\tClear: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\r\n\t\tDelete: forwardRef((props: any, ref: any) => <DeleteOutline {...props} ref={ref} />),\r\n\t\tDetailPanel: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\r\n\t\tEdit: forwardRef((props: any, ref: any) => <Edit {...props} ref={ref} />),\r\n\t\tExport: forwardRef((props: any, ref: any) => <SaveAlt {...props} ref={ref} />),\r\n\t\tFilter: forwardRef((props: any, ref: any) => <FilterList {...props} ref={ref} />),\r\n\t\tFirstPage: forwardRef((props: any, ref: any) => <FirstPage {...props} ref={ref} />),\r\n\t\tLastPage: forwardRef((props: any, ref: any) => <LastPage {...props} ref={ref} />),\r\n\t\tNextPage: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\r\n\t\tPreviousPage: forwardRef((props: any, ref: any) => <ChevronLeft {...props} ref={ref} />),\r\n\t\tResetSearch: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\r\n\t\tSearch: forwardRef((props: any, ref: any) => <Search {...props} ref={ref} />),\r\n\t\tSortArrow: forwardRef((props: any, ref: any) => <ArrowDownward {...props} ref={ref} />),\r\n\t\tThirdStateCheck: forwardRef((props: any, ref: any) => <Remove {...props} ref={ref} />),\r\n\t\tViewColumn: forwardRef((props: any, ref: any) => <ViewColumn {...props} ref={ref} />)\r\n\t};\r\n\r\n\tconst tableData = useSelector((state: AppStateType) => state.tablePage.data);\r\n\tconst [data, setData]: any = useState(tableData);\r\n\t\r\n\treturn (\r\n\t\t<MaterialTable\r\n\t\t\ticons={tableIcons}\r\n\t\t\ttitle=\"\"\r\n\t\t\tcolumns={[\r\n\t\t\t\t{ title: 'id', field: 'id' },\r\n\t\t\t\t{ title: 'firstName', field: 'firstName' },\r\n\t\t\t\t{ title: 'lastName', field: 'lastName' },\r\n\t\t\t\t{ title: 'email', field: 'email' },\r\n\t\t\t\t{ title: 'phone', field: 'phone' }\r\n\t\t\t]}\r\n\t\t\toptions={{\r\n\t\t\t\tsearch: true,\r\n\t\t\t\tsorting: true\r\n\t\t\t}}\r\n\t\t\tdata={data}\r\n\t\t\teditable={{\r\n        onRowAdd: newData =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              setData([...data, newData]);\r\n              \r\n              resolve();\r\n            }, 1000)\r\n          }),\r\n        onRowUpdate: (newData: any, oldData: any) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataUpdate[index] = newData;\r\n              setData([...dataUpdate]);\r\n\r\n              resolve();\r\n            }, 1000)\r\n          }),\r\n        onRowDelete: (oldData: any) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              setData([...dataDelete]);\r\n              \r\n              resolve()\r\n            }, 1000)\r\n          }),\r\n      }}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MaterialTableJSX;","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table } from './components/Table';\nimport { useSelector } from 'react-redux';\nimport { AppStateType } from './redux/store';\nimport Header from './components/Header';\nimport logo from './logo.svg';\nimport MaterialTableJSX from './components/MaterialTableJSX';\n\n\n\nfunction App() {\n\n\tconst [showTable, setShowTable] = useState('');\n\tconst [tableWatch, setTableWatch] = useState('');\n\tconst { data: tableData, preloader } = useSelector((state: AppStateType) => state.tablePage);\n\n\treturn (\n\t\t<div className=\"container App\">\n\t\t\t<Header setShowTable={setShowTable} showTable={showTable} />\n\t\t\t{showTable && <div>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm m-2\"\n\t\t\t\t\tonClick={() => setTableWatch('material-table')}>Material table</button>\n\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm m-2\"\n\t\t\t\t\tonClick={() => setTableWatch('custom-table')}>Custom table</button>\n\t\t\t</div>}\n\n\n\t\t\t{tableWatch === 'material-table' &&\n\t\t\t<div>\n\t\t\t{preloader ?\n\t\t\t\t<img src={logo} className=\"preloader-logo mt-5\" alt=\"logo\" /> :\n\t\t\t\t<MaterialTableJSX />\n\t\t\t}\n\t\t</div>}\n\n\t\t\t{tableWatch === 'custom-table' &&\n\t\t\t\t<div>\n\t\t\t\t\t{preloader ?\n\t\t\t\t\t\t<img src={logo} className=\"preloader-logo mt-5\" alt=\"logo\" /> :\n\t\t\t\t\t\tshowTable && <Table tableData={tableData} />\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t</div>\n\t);\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { tableReducer } from './setTable-reducer';\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n\ttablePage: tableReducer\r\n});\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}